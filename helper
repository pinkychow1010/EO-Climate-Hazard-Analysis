// released under Open Source GPL License Copyright Â© 2023 Ka Hei Chow

// ############################## //
// ###  Analysis Helper Tool #### //
// ############################## //

//LEGEND (Vertical, Gradient, position can be changed intuitvely)
//Source: https://mygeoblog.com/2017/03/02/creating-a-gradient-legend/

exports.add_colorbar = function add_color_bar(vis, title, decimal, size) {
  
  if (decimal === undefined || decimal === null){var decimal = 2};
  if (title === undefined || title === null){var title = "Legend"};
  if (size === undefined || size === null){var size = "large"};
  
  var legend_size = {
    'large': {
      'fontSize':'16px',
      'thumbnail':'10x200'
    },
    'medium': {
      'fontSize':'14px',
      'thumbnail':'7x140'
    },
    'small': {
      'fontSize':'12px',
      'thumbnail':'5x100'
    }
  };
  
  var scale = legend_size[size];
  
  // set position of panel
  var legendpos = ui.Panel({
    style: {
      position: 'bottom-right',
      padding: '6px 10px'
    }
  });
   
  // Create legend title
  var legendTitle = ui.Label({
    value: title,
    style: {
      fontWeight: 'bold',
      fontSize: scale.fontSize,//'16px',
      margin: '0 0 4px 0',
      padding: '0'
      }
  });
  
   // Add the title to the panel
  legendpos.add(legendTitle); 
  
  // create the legend image
  var lon = ee.Image.pixelLonLat().select('latitude');
  var gradient = lon.multiply((vis.max-vis.min)/100).add(vis.min);
  var legendImage = gradient.visualize(vis);
  
  // create text on top of legend
  var panel = ui.Panel({
      widgets: [
        ui.Label(vis.max.toFixed(decimal))
      ],
    });
  
  legendpos.add(panel);
    
  // create thumbnail from the image
  var thumbnail = ui.Thumbnail({
    image: legendImage, 
    params: {bbox:'0,0,10,100', dimensions:scale.thumbnail},//'10x200'},
    style: {padding: '0.5px', position: 'bottom-center'}
  });
  
  // add the thumbnail to the legend
  legendpos.add(thumbnail);
  
  // create text on top of legend
  var panel = ui.Panel({
      widgets: [
        ui.Label(vis.min.toFixed(decimal))
      ],
    });
  
  legendpos.add(panel);
  
  return legendpos;
};


exports.zonalInspect = function zonalInspect(vector, raster, map, reducer, log) {
    
    // import modules
    var palettes = require('users/gena/packages:palettes');
    var analysis = require('users/pinkychow1010/WB_IntraUrban:analysis_utils');
    
    if (reducer === undefined || reducer === null){var reducer = "mean"};
    if (log === undefined || log === null){var log = 0};
    
    var reducer_column = {
      "mean": ee.Reducer.mean,
      "median": ee.Reducer.median,
      "sum": ee.Reducer.sum
    };
    
    // set dark theme for label
    var dark_theme = {
        'backgroundColor': 'black',
        'color': 'white'
      };
    
    // set cursor
    if (map === undefined || map === null){
      Map.style().set('cursor', 'crosshair');  
    } else {
      map.style().set('cursor', 'crosshair');
    }
    
    // sample raster values with vector layer
    var zonal = raster.reduceRegions({
      collection: vector,
      scale: 500,
      reducer:  reducer_column[reducer]().setOutputs([reducer]) // new property from reducer
    });
    
    var attribute = reducer; // set as attribute
    
    // initial label for inspector
    var click = ui.Label('Click for info');
    var inspector = ui.Panel([click]);
    
    // add tool to map object
    if (map === undefined || map === null){
      Map.add(inspector);  
    } else {
      map.add(inspector); 
    }
    
    // set dark theme
    click.style().set(dark_theme);
    inspector.style().set(dark_theme);
    
    // since for some countries most of the values are missing,
    // error handling is required
    // also to inform user for no data case
    
    // check out those countries by calculating missing ratio
    var full_size = zonal.size(); // total polygons
    var data_size = zonal.filter(ee.Filter.notNull([attribute])).size(); // total polygons with data
    var missing_ratio = ee.Number(1).subtract(data_size.divide(full_size)); // get missing value proportion
    
    // if missing value are too high, it is very possible that the remaining data is unreliable
    // in this case the whole country will be treated as NO DATA
    if (missing_ratio.getInfo() > 0.2){ // use getInfo to compare with number rather than ee.Number Object which always return 1
      var no_data_label = ui.Label({value: "NO DATA"}); // show no data
      no_data_label.style().set(dark_theme); // set dark theme
      inspector.widgets().set(0, no_data_label);
      
      return null; // skip the choropleth part
    }
    
    // internal functions for get polygon property
    var getPolyLabel = function(coords) {
      
      // initial label
      inspector.widgets().set(0, ui.Label({
        value: 'Loading...',
        style: dark_theme
      }));
      
      // get click coordinates
      var click_point = ee.Geometry.Point(coords.lon, coords.lat);
      
      // get polygon names from sampled zonal layer
      var id_list = zonal.reduceColumns(ee.Reducer.toList(), ['shapeName']).get('list');
      
      // get polygon attributes from sampled zonal layer
      var attribute_list = zonal.reduceColumns(ee.Reducer.toList(), [attribute]).get('list');
      
      // get feature list from sampled zonal layer
      var shp_lst = zonal.toList(zonal.size());
      
      // get id of the clicked polygon
      var out = shp_lst.map(function (element) {
        var idx = shp_lst.indexOf(element);
        var overlap = ee.Feature(element).intersects(click_point);
        var target_id = ee.Algorithms.If(overlap, idx, 0);
        return target_id;
      }).removeAll([0]); // perserve only target index
      
      try {
        out = out.get(0).getInfo(); // target index
        var id = ee.List(id_list).get(out); // target name
        var attribute_value = ee.List(attribute_list).get(out); // target attribute value
        
        // set label layout
        var value_label = ui.Label({
            value: id.getInfo() + " " + attribute_value.getInfo().toFixed(2) // round to 2 decimals
          });
        
        // set dark theme for widgets
        value_label.style().set(dark_theme);
        
        inspector.widgets().set(0, value_label);
      } catch(e) {
        // empty label if no overlap
        var empty_label = ui.Label({value: ""});
        empty_label.style().set(dark_theme); // set dark theme
        inspector.widgets().set(0, empty_label);
      }
    };

  var palette = palettes.colorbrewer.RdBu[6]; // color map
  // var log = 0; // option for log scale
  var class_n = 6; // number of class/ bins
  var title = "Layer Mean"; // layer name
  var opacity = 0.9; // layer transparancy
  var size = "small";
  
  // display vector layer with inspector function to map object
  if (map === undefined || map === null){
    // add choropleth map
    try {
      analysis.choropleth_map(
        zonal, 
        attribute, 
        palette, 
        opacity, 
        log, 
        class_n, 
        title,
        null,
        null,
        size
        );
    } catch(e) {
      // if choropleth map does not run through, it is properly due to missing data
      // show no data label in this case
      var no_data_label = ui.Label({value: "NO DATA"});
      no_data_label.style().set(dark_theme); // set dark theme
      inspector.widgets().set(0, no_data_label);
    }

    
    Map.centerObject(vector);
    Map.onClick(getPolyLabel); // add on click interations
    
  } else {
    // add choropleth map
    try {
      analysis.choropleth_map(
        zonal, 
        attribute, 
        palette, 
        opacity, 
        log, 
        class_n, 
        title,
        map,
        null,
        size
        );
    } catch(e) {
      // no data case
      var no_data_label = ui.Label({value: "NO DATA"});
      no_data_label.style().set(dark_theme); // set dark theme
      inspector.widgets().set(0, no_data_label);
    }

    map.centerObject(vector); // zoom to aoi
    map.onClick(getPolyLabel);  // add on click interactions
  }
};



exports.add_popup = function add_popup(title, content, map, url) {
  // set style for elements
  var msg_style = {
    whiteSpace: 'pre', 
    textAlign: 'center', 
    padding: '0px 30px 30px 30px',
    width: '300px',
    color: 'grey',
    fontSize: '12px'
  };
  
  var hd_style = {
      whiteSpace: 'pre', 
      textAlign: 'center', 
      padding: '20px 20px 0px 20px',
      width: '300px',
      fontSize: '20px', 
      fontWeight:'bold'
    };
  
  var button_style = {
    padding:'0% 42.5% 20% 42.5%',
    position: 'top-center'
  };
  
  var page_style = {
    border: '7px solid #c9c9c9', 
    padding:'20% 2.5% 20% 2.5%',
    position: 'top-center',
    width: '400px',
    height: '350px'
  };
  
  function hide(widget) {
    widget.style().set({shown: false});
  }
  
  var start_button = ui.Button({
    label: title,
    onClick: message,
    style: {
      backgroundColor: '#ffffff00',
      position: 'bottom-center',
      fontSize: '30px',
      color: '#1C2833',
      width: '180px',
      height: '50px'
    }
  });
  
  // pop up panel once the button is clicked
  function message(){
    // add styled message
    var instructionMessage = ui.Label(content, msg_style);
    // instructionMessage.style().set(msg_style);
    
    // add styled close button
    var okButton = ui.Button('close', ok);
    okButton.style().set(button_style);
    function ok() {hide(instructionPanel)}
    
    // add title as panel heading
    var heading = ui.Label(title);
    heading.style().set(hd_style);
    
    if (url !== undefined || url !== null){
      heading.setUrl(url);
    }
    
    // construct panel
    var instructionPanel = ui.Panel([heading, instructionMessage, okButton]);
    instructionPanel.style().set(page_style);
    
    // display panel
    if (map === undefined || map === null){
      Map.add(instructionPanel);
    } else {
      map.add(instructionPanel);
    }
  }
  
  // add label button on map
  if (map === undefined || map === null){
      Map.add(start_button);
    } else {
      map.add(start_button);
    }
};