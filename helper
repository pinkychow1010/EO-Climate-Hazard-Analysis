// released under Open Source GPL License Copyright Â© 2023 Ka Hei Chow

// ############################## //
// ###  Analysis Helper Tool #### //
// ############################## //

//LEGEND (Vertical, Gradient, position can be changed intuitvely)
//Source: https://mygeoblog.com/2017/03/02/creating-a-gradient-legend/

exports.add_colorbar = function add_color_bar(vis, title, decimal, size) {
  
  if (decimal === undefined || decimal === null){var decimal = 2};
  if (title === undefined || title === null){var title = "Legend"};
  if (size === undefined || size === null){var size = "large"};
  
  var legend_size = {
    'large': {
      'fontSize':'16px',
      'thumbnail':'10x200'
    },
    'medium': {
      'fontSize':'14px',
      'thumbnail':'7x140'
    },
    'small': {
      'fontSize':'12px',
      'thumbnail':'5x100'
    }
  };
  
  var scale = legend_size[size];
  
  // set position of panel
  var legendpos = ui.Panel({
    style: {
      position: 'bottom-right',
      padding: '6px 10px'
    }
  });
   
  // Create legend title
  var legendTitle = ui.Label({
    value: title,
    style: {
      fontWeight: 'bold',
      fontSize: scale.fontSize,//'16px',
      margin: '0 0 4px 0',
      padding: '0'
      }
  });
  
   // Add the title to the panel
  legendpos.add(legendTitle); 
  
  // create the legend image
  var lon = ee.Image.pixelLonLat().select('latitude');
  var gradient = lon.multiply((vis.max-vis.min)/100).add(vis.min);
  var legendImage = gradient.visualize(vis);
  
  // create text on top of legend
  var panel = ui.Panel({
      widgets: [
        ui.Label(vis.max.toFixed(decimal))
      ],
    });
  
  legendpos.add(panel);
    
  // create thumbnail from the image
  var thumbnail = ui.Thumbnail({
    image: legendImage, 
    params: {bbox:'0,0,10,100', dimensions:scale.thumbnail},//'10x200'},
    style: {padding: '0.5px', position: 'bottom-center'}
  });
  
  // add the thumbnail to the legend
  legendpos.add(thumbnail);
  
  // create text on top of legend
  var panel = ui.Panel({
      widgets: [
        ui.Label(vis.min.toFixed(decimal))
      ],
    });
  
  legendpos.add(panel);
  
  return legendpos;
};


exports.zonalInspect = function zonalInspect(vector, raster, map) {
    
    // import modules
    var palettes = require('users/gena/packages:palettes');
    var analysis = require('users/pinkychow1010/WB_IntraUrban:analysis_utils');
    
    // set dark theme for label
    var dark_theme = {
        'backgroundColor': 'black',
        'color': 'white'
      };
    
    // set cursor
    if (map === undefined || map === null){
      Map.style().set('cursor', 'crosshair');  
    } else {
      map.style().set('cursor', 'crosshair');
    }
    
    // sample raster values with vector layer
    var zonal = raster.reduceRegions({
      collection: vector,
      scale: 500,
      reducer:  ee.Reducer.mean().setOutputs(["mean"]) // new property call "mean"
    });
    
    var attribute = "mean"; // set as attribute
    
    // initial label for inspector
    var click = ui.Label('Click for info');
    var inspector = ui.Panel([click]);
    
    // add tool to map object
    if (map === undefined || map === null){
      Map.add(inspector);  
    } else {
      map.add(inspector); 
    }
    
    // set dark theme
    click.style().set(dark_theme);
    inspector.style().set(dark_theme);
    
    var full_size = zonal.size();
    var data_size = zonal.filter(ee.Filter.notNull([attribute])).size();
    var missing_ratio = ee.Number(1).subtract(data_size.divide(full_size));
    
    if (missing_ratio > ee.Number(0.2)){
          var no_data_label = ui.Label({value: "NO DATA"});
          no_data_label.style().set(dark_theme); // set dark theme
          inspector.widgets().set(0, no_data_label);
          
          return null;
        }
    
    // internal functions for get polygon property
    var getPolyLabel = function(coords) {
      
      // initial label
      inspector.widgets().set(0, ui.Label({
        value: 'Loading...',
        style: dark_theme
      }));
      
      // get click coordinates
      var click_point = ee.Geometry.Point(coords.lon, coords.lat);
      
      // get polygon names from sampled zonal layer
      var id_list = zonal.reduceColumns(ee.Reducer.toList(), ['shapeName']).get('list');
      
      // get polygon attributes from sampled zonal layer
      var attribute_list = zonal.reduceColumns(ee.Reducer.toList(), [attribute]).get('list');
      
      // get feature list from sampled zonal layer
      var shp_lst = zonal.toList(zonal.size());
      
      // get id of the clicked polygon
      var out = shp_lst.map(function (element) {
        var idx = shp_lst.indexOf(element);
        var overlap = ee.Feature(element).intersects(click_point);
        var target_id = ee.Algorithms.If(overlap, idx, 0);
        return target_id;
      }).removeAll([0]); // perserve only target index
      
      try {
        out = out.get(0).getInfo(); // target index
        var id = ee.List(id_list).get(out); // target name
        var attribute_value = ee.List(attribute_list).get(out); // target attribute value
        
        // set label layout
        var value_label = ui.Label({
            value: id.getInfo() + " " + attribute_value.getInfo().toFixed(2) // round to 2 decimals
          });
        
        // set dark theme for widgets
        value_label.style().set(dark_theme);
        
        inspector.widgets().set(0, value_label);
      } catch(e) {
        // empty label if no overlap
        var empty_label = ui.Label({value: ""});
        empty_label.style().set(dark_theme); // set dark theme
        inspector.widgets().set(0, empty_label);
      }
    };

  var palette = palettes.colorbrewer.RdBu[6]; // color map
  var log = 0; // option for log scale
  var class_n = 6; // number of class/ bins
  var title = "Layer Mean"; // layer name
  var opacity = 0.9; // layer transparancy
  var size = "small";
  
  // display vector layer with inspector function to map object
  if (map === undefined || map === null){
    // add choropleth map
    try {
      analysis.choropleth_map(
        zonal, 
        attribute, 
        palette, 
        opacity, 
        log, 
        class_n, 
        title,
        null,
        null,
        size
        );
    } catch(e) {
      var no_data_label = ui.Label({value: "NO DATA"});
      no_data_label.style().set(dark_theme); // set dark theme
      inspector.widgets().set(0, no_data_label);
    }

    
    Map.centerObject(vector);
    Map.onClick(getPolyLabel); // add on click interations
    
  } else {
    // add choropleth map
    try {
      analysis.choropleth_map(
        zonal, 
        attribute, 
        palette, 
        opacity, 
        log, 
        class_n, 
        title,
        map,
        null,
        size
        );
    } catch(e) {
      var no_data_label = ui.Label({value: "NO DATA"});
      no_data_label.style().set(dark_theme); // set dark theme
      inspector.widgets().set(0, no_data_label);
    }

    map.centerObject(vector);
    map.onClick(getPolyLabel);  // add on click interactions
  }
};