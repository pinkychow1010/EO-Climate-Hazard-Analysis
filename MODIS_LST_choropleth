// released under MIT License Copyright Â© 2023 Ka Hei Chow

// MODIS LST
var helper = require('users/pinkychow1010/WB_IntraUrban:helper');
var analysis = require('users/pinkychow1010/WB_IntraUrban:analysis_utils');

// Define config for visualization
// var palettes = require('users/gena/packages:palettes');
// var palette = palettes.misc.tol_rainbow[7];
var palette = ["fee5d9","fcbba1","fc9272","fb6a4a","ef3b2c","cb181d","99000d"];
//['#781C81', '#3F60AE', '#539EB6', '#6DB388', '#CAB843', '#E78532', '#D92120'];

// area of interest
var geometry = ee.FeatureCollection("projects/ee-pinkychow1010/assets/WB_GEE/karachi_union_council_subset");

var abadis = ee.FeatureCollection("projects/ee-pinkychow1010/assets/WB_GEE/karachi_katchi_abadis");

Map.centerObject(geometry, 12);

// Check summer months based on geo-coordinates
// https://gis.stackexchange.com/questions/318959/get-lon-lat-of-a-top-left-corner-for-geometry-in-google-earth-engine
var centroid = geometry.first().geometry().centroid();

var listCoords = ee.Array.cat(centroid.coordinates(), 0); 
var yCoords = ee.List(listCoords).getInfo()[1];

var south = ee.Number(yCoords).lt(0);
var shift = south.multiply(6).getInfo();

var start_year = ee.Date("2020-01-01");
var end_year = ee.Date("2021-01-01");

var yearFilter = ee.Filter.date(
  start_year.advance(-1, "year"), 
  end_year.advance(1, "year")
  );

var summerFilter = ee.Filter.calendarRange(5+shift, 9-shift, "month");

// Data Visualization

var lst = ee.ImageCollection("MODIS/061/MOD11A1")
  //.map(maskClouds)
  .select("LST_Day_1km")
  .filter(yearFilter)
  .filter(summerFilter)
  .mean()
  .clip(geometry);

var max = ee.Number(lst.reduceRegion({
  reducer: ee.Reducer.percentile([95]), //ee.Reducer.max(),
  geometry: geometry,
  scale: 30,
  maxPixels: 1e9
  }
  ).values().get(0));
  
var min = ee.Number(lst.reduceRegion({
  reducer: ee.Reducer.percentile([5]), //ee.Reducer.min(),
  geometry: geometry,
  scale: 30,
  maxPixels: 1e9
  }
  ).values().get(0));

var vis = {min:min.getInfo(), max:max.getInfo(), palette: palette};
Map.addLayer(lst, vis, "Landsat-based Land Surface Temperature");

// print(lst); //band LST

var lulc = ee.ImageCollection('ESA/WorldCover/v200')
.first()
.clip(geometry);

var urban_mask = lulc.eq(50);

var lst_masked = lst.updateMask(urban_mask);

var lst_mean = lst_masked.reduceRegions({
  collection: geometry,
  scale: 30,
  reducer:  ee.Reducer.median()
});

// print(lst_mean);

choropleth_map(
  lst_mean, 
  'median', 
  palette,
  1, 
  0, 
  7, 
  "LST"
  );

var abadis_vis = {
  color: '#217aff',
  width: 1,
  fillColor: '#66a3ff', 
};

Map.addLayer(abadis.filterBounds(geometry), abadis_vis, 'Informal Settlements');


// #################################
// ######## Define Functions #######
// #################################

function bitwiseExtract(value, fromBit, toBit) {
  if (toBit === undefined) toBit = fromBit
  var maskSize = ee.Number(1).add(toBit).subtract(fromBit)
  var mask = ee.Number(1).leftShift(maskSize).subtract(1)
  return value.rightShift(fromBit).bitwiseAnd(mask)
}

function maskClouds(image) {
  // #################################
  // ###  MODIS     cloud mask   #####
  // #################################
  var qa = image.select('StateQA')
  var cloudState = bitwiseExtract(qa, 0, 1) 
  var cloudShadowState = bitwiseExtract(qa, 2)
  var cirrusState = bitwiseExtract(qa, 8, 9)
  var mask = cloudState.eq(0) // Clear
    .and(cloudShadowState.eq(0)) // No cloud shadow
    .and(cirrusState.eq(0)) // No cirrus
  return image.updateMask(mask)
}

function maskL8sr(col) {
  // #################################
  // ###  Landsat 8 cloud mask   #####
  // #################################
  
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = (1 << 3);
  var cloudsBitMask = (1 << 5);
  
  // Get the pixel QA band.
  var qa = col.select('pixel_qa');
  
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return col.updateMask(mask);
}


function choropleth_map(
  vector, 
  attribute, 
  palette,
  opacity,
  log, 
  class_n,
  title
  ) {
  
  if (log === undefined || log === null){var log = 0};
  if (class_n === undefined || class_n === null){var class_n = 7};
  if (title === undefined || title === null){var title = attribute};
  if (opacity === undefined || opacity === null){var opacity = 1};
  if (palette === undefined || palette === null){var palette = palettes.cmocean.Balance[7]};
  
  var colors = ee.List(palette);
  var zone = ee.FeatureCollection(vector);

  var min_val = ee.Number(vector.aggregate_min(attribute).getInfo());
  var max_val = ee.Number(vector.aggregate_max(attribute).getInfo());
  
  Map.centerObject(zone, 10);
  Map.setOptions('HYBRID');
  
  function get_digit(number) {
    return number.toString().length;
  }
  
  var get_index = function(value) {
    
    var log_inv = ee.Number(log).eq(ee.Number(0)); // 1 if log = 0 and 0 if log = 1
    
    var scaled_linear = value.multiply(log_inv);
    var scaled_log = value.log().multiply(log);
    
    var scaled_val = scaled_linear.add(scaled_log);
    
    var min_linear = min_val.multiply(log_inv);
    var min_log = min_val.log().multiply(log);
    var min = min_log.add(min_linear);
    
    var max_linear = max_val.multiply(log_inv);
    var max_log = max_val.log().multiply(log);
    var max = max_log.add(max_linear);
    
    var step = (max.subtract(min)).divide(class_n);
    
    var index = (scaled_val.subtract(min)).divide(step).round();
    var index_clamp = index.clamp(0, ee.Number(class_n).subtract(1));

    return index_clamp;
  };
  
  zone = zone.map(function(f) {

    var value = f.getNumber(attribute);
    var index = get_index(value);
    
    var color = colors.get(index);
    return f.set('style', {fillColor: color});
    });
  
  var VisCustom = zone.style({
    styleProperty: 'style',
    width: 1
  });

  Map.addLayer(VisCustom, {'opacity': opacity}, title);
  
  var vis = {
    min: vector.aggregate_min(attribute).getInfo(),
    max: vector.aggregate_max(attribute).getInfo(),
    palette: palette
  };
  
  var log_hint = ee.Dictionary({
    '1': "(log)",
    '0': ""
  });
  
  function toString(number) {
    return ee.Number(number).format('%d')
  }

  var legend = helper.add_colorbar(vis, "Legend " + log_hint.get(toString(log)).getInfo());
  Map.add(legend);

};