
// ################################################## //
// ### Main Interface for Data Downloading Tool ##### //
// ################################################## //

// import module

var basemap = require('users/pinkychow1010/WB_IntraUrban:basemap_resources'); // customized basemap to enhance visuals 
var palettes = require('users/gena/packages:palettes'); // color palettes for color bar
var helper = require('users/pinkychow1010/GEE:WorldBank/helper'); // utils functions
var data = require('users/pinkychow1010/WB_IntraUrban:explorer_utils'); // functions for implementation of data layers in app
var style = require('users/pinkychow1010/WB_IntraUrban:explorer_style'); // dict for explorer styling

/**
 * Data explorer: an interactive dashboard to display spatial data layers for downloads.
 * 
 * This function is used to construct an app for data visualization and exports for a single admin region
 * 
 * @author Ka Hei Chow.
 *
 * @see  helper.add_colormap
 * @link 'users/pinkychow1010/GEE:WorldBank/helper'
 * @global
 * 
 * @see  basemap.addCustomBasemap
 * @link 'users/pinkychow1010/WB_IntraUrban:basemap_resources'
 * @global
 * 
 * @see  data.export_urban_density data.export_summer_lst data.export_population data.export_landuse
 * @link 'users/pinkychow1010/WB_IntraUrban:explorer_utils'
 * @global
 *
 * @fires   call actions according to dict
 * @listens select area of interest
 * @listens select dataset
 *
 * @param {ee.Reducer} a reducer method     Resampling method for data export.
 * @param {str} name     App title to display.
 * 
 * @return Actions depends on functions from explorer_utils
 *
 */
exports.data_explorer = function data_download_app(reducer, title_name) {
  
  // default values for variables
  if (reducer === undefined || reducer === null){var reducer = ee.Reducer.mean()}
  if (title_name === undefined || title_name === null){var title_name = "World Bank Data Explorer"}
  
  // ################################# //
  // ########### GUI APP ############# //
  // ################################# //
  
  // :::::: DATASET ::::::::
  
  // main dict to define action selection
  var action_calls = {
    'WorldCover': data.export_landuse,
    'Population': data.export_population
  };
  
  // assign action to be fired
  var action_call;
  var rasterLayer; // layer for export
  var export_resolution; // resolution
  var filtered; // aoi
  
  reset(); // reset app display
  
  // action on changing data layers by user from the drop-down menu
  function changeLayers(layerKey) {
    action_call = action_calls[layerKey]; // change action from dict
    
    // in case of already selected aoi, clean map and call action directly
    if (typeof(filtered) !== 'undefined') {
      Map.clear(); // reset
      Map.setControlVisibility({drawingToolsControl:false});
      basemap.addCustomBasemap('MutedMonotone');
      draw_bounds(filtered);
      rasterLayer = action_call(filtered); // update rasterLayer for export
    }
  }
  
  // drop-down menu to select data layer
  var ds_selector = ui.Select({
    placeholder: 'Select a data layer',
    items: [
      {value: 'WorldCover', label: 'World Cover'}, 
      {value: 'Population', label: 'Population Grid'}
    ],
    onChange: changeLayers
  });
  
  // :::::: LOCATION ::::::::
    
  // import geometry boundary data for user selection
  var ADM0 = ee.FeatureCollection("projects/sat-io/open-datasets/geoboundaries/CGAZ_ADM0");
  var ADM1 = ee.FeatureCollection("projects/sat-io/open-datasets/geoboundaries/CGAZ_ADM1");
  var ADM2 = ee.FeatureCollection("projects/sat-io/open-datasets/geoboundaries/CGAZ_ADM2");
  
  var mainPanel = ui.Panel(); // side bar
  mainPanel.style().set(style.mainPanel); // styling main panel
  
  ui.root.insert(0,mainPanel);
  
  // set up title
  var title = ui.Label(title_name);
  title.style().set({
    'position':  'top-center',
    'fontSize': '24px',
    'color': 'white',
    'fontWeight': 'bold',
    'fontFamily': 'serif',
    'backgroundColor': 'black',
    'padding': '10px 10px 4px 4px',
    });
  
  // content for main panel
  mainPanel.add(title);
  mainPanel.add(ds_selector);
  
  var dropdownPanel = ui.Panel(); // panel to hold the drop-down boxes
  dropdownPanel.style().set({'backgroundColor': 'black'});
  
  // set up location input session (dropdowns for admin0, admin1 and admin2 names)
  // disable admin selections
  var admin0Select = ui.Select({
      placeholder: 'Please wait..',
    }).setDisabled(true);
    
  var admin1Select = ui.Select({
      placeholder: 'Select a country first',
    }).setDisabled(true);
    
  var admin2Select = ui.Select({
    placeholder: 'Select admin 1 unit first',
  }).setDisabled(true);
  
  dropdownPanel.add(admin0Select);
  dropdownPanel.add(admin1Select);
  dropdownPanel.add(admin2Select);
  mainPanel.add(dropdownPanel);
  
  // Update from Admin 0 selection
  // Define the onChange() function for admin0Select
  var admin0Selected = function(admin0Selection) {
    Map.clear(); reset();
    admin1Select.items().reset();
    admin2Select.items().reset();
    admin1Select.setPlaceholder('Please wait..');
    admin2Select.setPlaceholder('Select a admin 1 unit first..');
  
    // given admin0 values, fetch admin1 values for that country
    var selectedAdmin0 = ADM0.filter(ee.Filter.eq('shapeName', admin0Selection));
    var shapeID = ee.Feature(selectedAdmin0.first()).get('shapeID');
    var selectedAdmin1 = ADM1.filter(ee.Filter.eq('ADM0_shape', shapeID));
    var admin1Names = selectedAdmin1.aggregate_array('shapeName').sort();
  
    // Use evaluate() to not block the UI
    admin1Names.evaluate(function(items){
      admin1Select.setPlaceholder('Select admin1 unit');
      admin1Select.items().reset(items);
      admin1Select.setDisabled(false); // enable the menu
    });
  };
  
  // Define the onChange() function for admin1Select
  var admin1Selected = function(admin1Selection) {
    Map.clear(); reset();
    
    // Update admin 2 menu from admin 1 selection
    admin2Select.setPlaceholder('Please wait..');
    var selectedAdmin1 = ADM1.filter(ee.Filter.eq('shapeName', admin1Selection));
    var shapeID = ee.Feature(selectedAdmin1.first()).get('shapeID');
    var selectedAdmin2 = ADM2.filter(ee.Filter.eq('ADM1_shape', shapeID));
    var admin2Names = selectedAdmin2.aggregate_array('shapeName').sort();
    
    // enable admin 2 selection
    admin2Names.evaluate(function(items){
      if (items.length === 0) {
        items = ['No Admin2 Units'];
        admin2Select.items().reset(items);
      }
      else {
        admin2Select.items().reset(items); 
      }
      admin2Select.setPlaceholder('Select admin2 unit');
      admin2Select.setDisabled(false);
    });
  };
  
  // Define the onChange() function for admin2Select
  var admin2Selected = function(admin1Selection) {
    Map.clear(); reset();
    
    // fetch location inputs from user
    var admin0Value = admin0Select.getValue();
    var admin1Value = admin1Select.getValue();
    var admin2Value = admin2Select.getValue();
    
    var selectedAdmin1 = ADM1.filter(ee.Filter.eq('shapeName', admin1Value));
    var shapeGroup = ee.Feature(selectedAdmin1.first()).get('shapeGroup');
    
    // Some regions do not have admin2 values
    // We are on client-side, so using if/else is ok
    if (admin2Value == 'No Admin2 Units') {
        var result = admin1Value + ',' + admin0Value;
        // var filtered = ADM1
        filtered = ADM1
          .filter(ee.Filter.eq('shapeName', admin1Value))
          .filter(ee.Filter.eq('shapeGroup', shapeGroup));
    }
    else {
        var result = admin2Value + ',' + admin1Value + ',' + admin0Value;
        // var filtered = ADM2
        filtered = ADM2
          .filter(ee.Filter.eq('shapeName', admin2Value))
          .filter(ee.Filter.eq('shapeGroup', shapeGroup))
          .filter(ee.Filter.intersects('.geo', selectedAdmin1.geometry()));
    }
    
    // zoom to selected aoi and highlight polygon
    Map.centerObject(filtered);
    draw_bounds(filtered);
    
    // call main action
    var output = action_call(filtered);
    if (typeof(output) !== 'undefined') {rasterLayer = output;}
  };
  
  // Register the callback functions
  admin0Select.onChange(admin0Selected);
  admin1Select.onChange(admin1Selected);
  admin2Select.onChange(admin2Selected);
  
  // Get all country names and sort them
  var admin0Names = ADM0.aggregate_array('shapeName').sort().distinct();
  // Fetch the value using evaluate() to not block the UI
  admin0Names.evaluate(function(items){
    admin0Select.items().reset(items);
    admin0Select.setDisabled(false); // enable menu
    admin0Select.setPlaceholder('Select a country for analysis'); // Change placeholder
  });
  
  // Resample Data to resolution defined by user
  function resample(image, res, reducer) {
    var proj = image.projection().getInfo();
    var crs = proj.crs;
    
    var resampled = image.reduceResolution({
      'reducer':reducer,
      'bestEffort':true
    }).reproject({'crs':crs,'scale':res});
    return resampled;
  }
  
  // Export Selected Raster Data
  function downloadImg() {
    // fetch aoi
    var admin0Value = admin0Select.getValue();
    var admin1Value = admin1Select.getValue();
    var admin2Value = admin2Select.getValue();
    var export_resolution = res_selector.getValue();
    
    var selectedAdmin1 = ADM1.filter(ee.Filter.eq('shapeName', admin1Value));
    var shapeGroup = ee.Feature(selectedAdmin1.first()).get('shapeGroup');
    
    // Some regions do not have admin2 values
    // We are on client-side, so using if/else is ok
    if (admin2Value == 'No Admin2 Units') {
        var result = admin1Value + ',' + admin0Value;
        var filtered = ADM1
          .filter(ee.Filter.eq('shapeName', admin1Value))
          .filter(ee.Filter.eq('shapeGroup', shapeGroup));
    }
    else {
        var result = admin2Value + ',' + admin1Value + ',' + admin0Value
        var filtered = ADM2
          .filter(ee.Filter.eq('shapeName', admin2Value))
          .filter(ee.Filter.eq('shapeGroup', shapeGroup))
          .filter(ee.Filter.intersects('.geo', selectedAdmin1.geometry()));
    }
    
    // resample raster
    var resampledLayer = resample(rasterLayer, export_resolution, reducer);
    var img = resampledLayer.mask(resampledLayer.mask());
    
    // export format
    var downloadArgs = {
      name: 'Image',
      scale: export_resolution,
      region: filtered.geometry().dissolve().bounds()
   };
  
   // get url link for user to download raster
   var url = img.getDownloadURL(downloadArgs);
   urlLabel.setUrl(url);
   urlLabel.style().set({shown: true}); // display link
  }
  
  // label export resolution
  var selectorLabel = ui.Label('Export resolution (meter)');
  selectorLabel.style().set({
    'backgroundColor': 'black',
    'color': 'red',
    'fontSize': '11px',
    'padding': '1px'
  });
  // selectorLabel.style().set('backgroundColor', 'black');
  // selectorLabel.style().set('color', 'red');
  // selectorLabel.style().set('fontSize', '11px');
  // selectorLabel.style().set('padding', '1px');
  
  // styling
  var selector_style = {
    width: '200px',
    color: 'white',
    fontWeight: 'bold',
    backgroundColor: 'black'
  };
  
  // data slider for resolution input
  var res_selector = ui.Slider({
    min: 10, 
    max: 2000, 
    value: 1000, 
    step: 10,
    style: selector_style
  });
  
  // button to export, will fire download url when clicked
  var downloadButton = ui.Button('Export Raster', downloadImg);
  downloadButton.style().set({
    'width': '100px',
    'backgroundColor': 'black',
    'color': '#919090',
    'padding': '20px 4px 4px 4px'
  });
  // downloadButton.style().set('width', '100px');
  // downloadButton.style().set('backgroundColor', 'black');
  // downloadButton.style().set('color', '#919090');
  // downloadButton.style().set('padding', '20px 4px 4px 4px');
  
  // set up url label
  var urlLabel = ui.Label('Click to download', {shown: false});
  urlLabel.style().set({'backgroundColor': 'black'});
  
  // combine components to export panel and add it to side bar
  var exportPanel = ui.Panel([selectorLabel, res_selector, downloadButton, urlLabel]);
  exportPanel.style().set({'backgroundColor': 'black'});
  mainPanel.add(exportPanel);
};


// draw admin boundary selected by user
function draw_bounds(geometry){
  var empty = ee.Image().byte();
  var outlines = empty.paint({
    featureCollection: geometry,
    color: 'red',
    width: 2
  });
  var palette = ['FF0000', '00FF00', '0000FF'];
  Map.addLayer(outlines, {palette: palette}, 'Boundary');  
}

// config base map on reset
function reset(){
  basemap.addCustomBasemap('MutedMonotone');
  Map.setCenter(0, 20, 1.8);
  Map.setControlVisibility({drawingToolsControl:false});
}