// released under MIT License Copyright Â© 2023 Ka Hei Chow

// ################################################## //
// ### World Bank Intra-Urban Data Explorer Tool #### //
// ################################################## //

// This script is used to download multiple regional rasters in customised resolution
// to facilitate EO-based intra-urban analysis

// import module
var basemap = require('users/pinkychow1010/WB_IntraUrban:basemap_resources');
var palettes = require('users/gena/packages:palettes');
var helper = require('users/pinkychow1010/GEE:WorldBank/helper');

// construct app
// data_download_app(export_summer_lst);
// data_download_app(export_population);
data_download_app(export_landuse, ee.Reducer.mode());
// data_download_app(export_urban_density);

// define function for Summer Temperature

/**
 * Calculate summer land surface temperature: export summer average temperature to interactive dashboard.
 * 
 * This function is used to construct a MODIS-based LST gridded dataset based on location inputs from users.
 * 
 * @author Ka Hei Chow.
 *
 * @see  helper.add_colormap
 * @link 'users/pinkychow1010/GEE:WorldBank/helper'
 * @global
 *
 * @fires   add LST raster layer
 * @listens select area of interest
 *
 * @param {ee.Geometry.Polygon}   vector        A vector layer which consists of a single polygon (admin boundary).
 * 
 * @return {ee.Image} Single LST data layer bounds by selected admin 2 boundary.
 *
 */
exports.export_summer_lst = function export_summer_lst(aoi) {
  
  // calculate geometry of vector layer
  var bbox = aoi.geometry();
  
  // determine location in south / north hemisphere (different summer months)
  var centroid = bbox.centroid();
  var listCoords = ee.Array.cat(centroid.coordinates(), 0); 
  var yCoords = ee.List(listCoords).getInfo()[1];
  
  // south/ north
  var south = ee.Number(yCoords).lt(0);
  var shift = south.multiply(6).getInfo();
  
  // evaluation year
  var start_year = ee.Date("2020-01-01");
  var end_year = ee.Date("2021-01-01");
  
  // filter dataset to evaluation year
  var yearFilter = ee.Filter.date(
    start_year.advance(-1, "year"), 
    end_year.advance(1, "year")
    );
  
  // get summer months depends on location
  var summerFilter = ee.Filter.calendarRange(5+shift, 9-shift, "month");

  var lst = ee.ImageCollection("MODIS/061/MOD11A2")
    //.map(maskClouds) // to be done: add MODIS cloud masking 
    .select("LST_Day_1km") // day time temperature
    .filter(yearFilter) // filter year
    .filter(summerFilter) // filter season
    .median() // get median
    .multiply(0.02) // apply scale factor
    .subtract(272.15) // apply offset
    .clip(bbox); // limit bounds
  
  // visualization format
  var vis = {
    min: 20.0,
    max: 40.0,
    palette: ['blue', 'white', 'red'],
  };
  
  // add layer for land surface temperature
  Map.addLayer(lst, vis, 'MODIS LST 2020');
  Map.centerObject(bbox, 8);
  
  // add legend to raster layer
  var legend = helper.add_colorbar(vis, "LST");
  Map.add(legend);
  
  // for some reason, the original projection altered after temporal filtering
  // this line is necessary to set back valid projection for the output layer
  var ref = ee.ImageCollection("MODIS/061/MOD11A2").first().projection();
  
  return lst.setDefaultProjection(ref);
}

// define function for Population Count

/**
 * World Population: export population density layer to interactive dashboard.
 * 
 * This function is used to construct a population count gridded dataset based on location inputs from users.
 * 
 * @author Ka Hei Chow.
 *
 * @see  helper.add_colormap
 * @link 'users/pinkychow1010/GEE:WorldBank/helper'
 * @global
 *
 * @fires   add population density raster layer
 * @listens select area of interest
 *
 * @param {ee.Geometry.Polygon}   vector        A vector layer which consists of a single polygon (admin boundary).
 * 
 * @return {ee.Image} Single population count data layer bounds by selected admin 2 boundary.
 *
 */
exports.export_population = function export_population(aoi) {
  
  // compute vector boundary
  var bbox = aoi.geometry();
  
  // get population dataset (GHSL 2015)
  var dataset = ee.ImageCollection('JRC/GHSL/P2016/POP_GPW_GLOBE_V1')
                  .filter(ee.Filter.date('2015-01-01', '2015-12-31')).first();
  var pop = dataset.select('population_count').clip(bbox); // limit bounds
  
  // visualization format
  var vis = {
    min: 0.0,
    max: 200.0,
    palette: ['060606', '337663', '337663', 'ffffff'],
  };
  
  // add layer for population
  Map.addLayer(pop, vis, 'GSHL Population 2015');
  Map.centerObject(bbox, 8);
  
  // add legend to raster layer
  var legend = helper.add_colorbar(vis, "Population");
  Map.add(legend);

  return pop;
}
  

// define function for ESA world cover 2020

/**
 * Land Use Cover 2020: export land use cover (LULC) layer to interactive dashboard.
 * 
 * This function is used to construct a land use cover gridded dataset based on location inputs from users.
 * 
 * @author Ka Hei Chow.
 *
 * @see  helper.add_colormap
 * @link 'users/pinkychow1010/GEE:WorldBank/helper'
 * @global
 *
 * @fires   add LULC raster layer
 * @listens select area of interest
 *
 * @param {ee.Geometry.Polygon}   vector        A vector layer which consists of a single polygon (admin boundary).
 * 
 * @return {ee.Image} Single land use data layer bounds by selected admin 2 boundary.
 *
 */
exports.export_landuse = function export_landuse(aoi) {
  
  // calculate boundary
  var bbox = aoi.geometry();
  
  // get land use cover dataset for boundary
  var lulc = ee.ImageCollection('ESA/WorldCover/v200')
  .first()
  .clip(bbox);
  
  // add LULC raster layer on map
  Map.addLayer(lulc, {}, 'Land Use Cover 2020');
  Map.centerObject(bbox, 8);
  
  return lulc;
}

// define function for extract dense urban areas
// this script is used to extract urban areas (larger than 20%) and estimate urban density 

/**
 * Urban Density: export urban density layer to interactive dashboard.
 * 
 * This function is used to construct a urban density gridded dataset based on location inputs from users, 
 * masked by urban regions (higher than 20% of areas within 5 km-radius circle).
 * 
 * @author Ka Hei Chow.
 *
 * @see  helper.add_colormap
 * @link 'users/pinkychow1010/GEE:WorldBank/helper'
 * @global
 *
 * @fires   add urban density raster layer
 * @listens select area of interest
 *
 * @param {ee.Geometry.Polygon}   vector        A vector layer which consists of a single polygon (admin boundary).
 * 
 * @return {ee.Image} Single urban density data layer bounds by selected admin 2 boundary.
 *
 */
exports.export_urban_density = function export_urban_density(aoi) {
  
  // compute boundary
  var bbox = aoi.geometry();
  
  // get land use cover
  var lulc = ee.ImageCollection('ESA/WorldCover/v200')
  .first()
  .clip(bbox);
  
  // extract urban land use
  var urban_mask = lulc.eq(50);
  
  // calculate urban density within 5km radius (circle)
  var reduceNeighborhood = urban_mask.reduceNeighborhood(
    ee.Reducer.mean(), 
    ee.Kernel.circle(5000, 'meters')
  ).multiply(100).toByte();
  
  // visualization params
  var palette = palettes.misc.tol_rainbow[7];
  var vis = {min: 20, max: 80, palette: palette};
  
  // focus on dense areas, masked rural areas (< 20%)
  var urban_threshold = reduceNeighborhood.gt(20);
  var reduceNeighborhoodMasked = reduceNeighborhood.updateMask(urban_threshold);
  
  // add urban density layer to map
  Map.addLayer(reduceNeighborhoodMasked, vis, 'Urban Density');
  Map.centerObject(bbox, 8);
  
  // add legend
  var legend = helper.add_colorbar(vis, "Urban Density");
  Map.add(legend);
  
  return reduceNeighborhoodMasked;
}
