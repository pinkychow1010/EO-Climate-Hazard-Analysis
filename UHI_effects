/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[72.07226481049618, 33.019905398001136],
          [72.07226481049618, 31.087942584442043],
          [75.24731363862118, 31.087942584442043],
          [75.24731363862118, 33.019905398001136]]], null, false),
    table = ee.FeatureCollection("projects/ee-pinkychow1010/assets/WB_GEE/karachi_katchi_abadis");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// released under MIT License Copyright Â© 2023 Ka Hei Chow

// ################################# //
// ######    Urban Heat       ###### //
// ###### Island Intensity    ###### //
// ################################# //

/**
 * Compared to land surface temperature, urban heat island (UHI) effects focus on the temperature differences between 
 * urban and rural areas, rather than the absolute temperature. It might better represents the urban heat problems
 * the population encounters. This is a experimental function deriving this MODIS-based LST differences.
 * Landsat is not used as it is also impacted by small-scale factors such as building structure. The UHI intensity
 * is normalized to index ranging between 0 and 1 for the same region. 
 */

var start_year = ee.Date("2020-01-01");
var end_year = ee.Date("2021-01-01");

var yearFilter = ee.Filter.date(
  start_year.advance(-1, "year"), 
  end_year.advance(1, "year")
  );

var LST_band = 'LST_Night_1km';

// UHI effect might be more prominent at nights from research
var max = ee.ImageCollection("MODIS/061/MOD11A2")
  .select(LST_band)
  .filter(yearFilter)
  .median()
  .multiply(0.02)
  .subtract(272.15)
  .clip(geometry);

Map.addLayer(max, {
  min: 30, max: 42, palette: ['blue','white','red']
}, "MODIS LST");

// Map.addLayer(max, {
//   min: 30, max: 45, palette: ['navy','blue','yellow','red']
// }, "P90 Max Temp");

Map.setOptions('HYBRID');
Map.centerObject(geometry, 10)

var lulc = ee.ImageCollection('ESA/WorldCover/v200')
.first().clip(geometry);

var urban_mask = lulc.eq(50);

// calculate urban density
var reduceNeighborhood = urban_mask.reduceNeighborhood(
  ee.Reducer.mean(), 
  ee.Kernel.circle(5000, 'meters')
).multiply(100).toByte();

var urban_threshold = reduceNeighborhood.gt(20);
var reduceNeighborhoodMasked = reduceNeighborhood.updateMask(urban_threshold);

// Map.addLayer(reduceNeighborhoodMasked);

var rural_heat = max.updateMask(urban_threshold.eq(0)).updateMask(lulc.neq(50));

// Map.addLayer(rural_heat, {}, "Rural Heat");

// Combine mean and standard deviation reducers for efficiency.
var combinedReducer = ee.Reducer.mean().combine({
  reducer2: ee.Reducer.stdDev(),
  sharedInputs: true});

var rural_heat_sample = rural_heat.sample(
  {region: geometry, scale: 25000, numPixels: 2000, geometries: true});
  
// Estimate global mean and standard deviation from the points.

print(rural_heat_sample);

var stats = rural_heat_sample.reduceColumns({
  reducer: combinedReducer,
  selectors: [LST_band]});
  
// var interpolated = rural_heat_sample.inverseDistance({
//   range: 4e4,
//   propertyName: 'LST_Day_1km',
//   mean: stats.get('mean'),
//   stdDev: stats.get('stdDev')});

var interpolated = rural_heat_sample.kriging({
  propertyName: LST_band,
  shape: 'gaussian',
  range: 4.8e4,
  sill: 164,
  nugget: 0.05,
  maxDistance: 3.8e4,
  reducer: ee.Reducer.mean()
});


// Map.addLayer(interpolated, {min: 33, max: 37}, "Interpolated");
var urban = (max.subtract(interpolated).updateMask(lulc.eq(50)))
var max = urban.reduceRegion(ee.Reducer.max(), geometry, 1000).getNumber(LST_band);
var min = urban.reduceRegion(ee.Reducer.min(), geometry, 1000).getNumber(LST_band);

var uhi = urban.unitScale(min,max.multiply(0.8))
Map.addLayer(uhi, {min: 0, max: 1, palette: ['aqua','blue','yellow','orange','red','#8B0000']}, "UHI");

var styling = {color: 'black', fillColor: '00000000'};
Map.addLayer(table.style(styling))