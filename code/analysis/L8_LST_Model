/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #98ff00 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[115.8017312987085, 40.30757906540068],
          [115.8017312987085, 39.50063099580998],
          [117.19974155261475, 39.50063099580998],
          [117.19974155261475, 40.30757906540068]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var helper = require('users/pinkychow1010/WB_IntraUrban:helper');
var analysis = require('users/pinkychow1010/WB_IntraUrban:analysis_utils');
var palette = ["fee5d9","fcbba1","fc9272","fb6a4a","ef3b2c","cb181d","99000d"];

// area of interest
// var geometry = ee.FeatureCollection("projects/ee-pinkychow1010/assets/WB_GEE/karachi_union_council_subset");
var abadis = ee.FeatureCollection("projects/ee-pinkychow1010/assets/WB_GEE/karachi_katchi_abadis");

Map.centerObject(geometry, 12);

// Check summer months based on geo-coordinates
var yearFilter = ee.Filter.date(
  ee.Date("2020-01-01"), ee.Date("2023-01-01")
  );

var summerFilter = helper.get_summer(geometry);

print(summerFilter);

var landsat = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
  .map(maskL8sr)
  .filter(yearFilter)
  .filter(summerFilter)
  .median()
  .clip(geometry);


var b3 = landsat.select(['SR_B3']).multiply(0.0000275).add(-0.2).rename('B3');
var b4 = landsat.select(['SR_B4']).multiply(0.0000275).add(-0.2).rename('B4');
var b5 = landsat.select(['SR_B5']).multiply(0.0000275).add(-0.2).rename('B5');
var b10 = landsat.select(['ST_B10']).multiply(0.00341802).add(149).rename('B10');

landsat = landsat.addBands(b3).addBands(b4).addBands(b5).addBands(b10);
print(landsat);

var viz = {
  bands: ['B5', 'B4', 'B3'],
  min: 0,
  max: 1,
  gamma: [0.95, 1.1, 1]
};


Map.addLayer(landsat,viz,"L8");

var lst = calc_ls_lst(landsat);

Map.addLayer(lst, {min:25, max:40, palette: palette}, "LST");
    
function calc_ls_lst(landsat) {
    // #################################
    // # calculating LST from landsat ##
    // #################################
    // https://gis.stackexchange.com/questions/314374/calculating-lst-from-landsat-8-in-google-earth-engine
    // ndvi    
    var ndvi = landsat.normalizedDifference(['B5', 'B4']).rename('NDVI');

    //select thermal band 10(with brightness tempereature), no calculation 
    var thermal= landsat.select('B10')//.multiply(0.1);
    
    Map.addLayer(thermal,{min:280,max:320,palette:palette},"THERMAL");
    
    // find the min and max of NDVI
    var min_ndvi = ee.Number(ndvi.reduceRegion({
      reducer: ee.Reducer.min(),
      geometry: geometry,
      scale: 30,
      maxPixels: 1e9
      }
      ).values().get(0));
    
    var max_ndvi = ee.Number(ndvi.reduceRegion({
      reducer: ee.Reducer.max(),
      geometry: geometry,
      scale: 30,
      maxPixels: 1e9
      }
      ).values().get(0));
    
    // Fractional Vegetation
    var fv = (ndvi.subtract(min_ndvi).divide(max_ndvi.subtract(min_ndvi)))
      .pow(ee.Number(2))
      .rename('FV'); 
    
    // Emissivity
    var EM = fv.multiply(ee.Number(0.004)).add(ee.Number(0.986)).rename('EMM');
    
    // Map.addLayer(EM,{min:0,max:1,palette:palette},"EM");
    
    // LST in Celsius Degree bring -273.15
    var LST = thermal.expression(
      '(Tb/(1 + (0.00115* (Tb / 1.438))*log(Ep)))-273.15', 
      {
        'Tb': thermal.select('B10'),
        'Ep': EM.select('EMM')
      }
      ).rename('LST');
    
    return LST;
}

function maskL8sr(col) {
  // #################################
  // ###  Landsat 8 cloud mask   #####
  // #################################
  
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = (1 << 3);
  var cloudsBitMask = (1 << 5);
  
  // Get the pixel QA band.
  var qa = col.select("QA_PIXEL")//('pixel_qa');
  
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return col.updateMask(mask);
}
