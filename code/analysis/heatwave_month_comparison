/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[67.47922202812562, 25.619202874468535],
          [67.47922202812562, 24.504607230282744],
          [69.06125327812562, 24.504607230282744],
          [69.06125327812562, 25.619202874468535]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▄▀
//▄▀▄▀▄                                                                        ▄▀▄▀▄▀▄
//▄▀▄▀▄           COPY THIS URL LINK TO PLAY AROUND WITH THE CODE              ▄▀▄▀▄▀▄
//▄▀▄▀▄                                                                        ▄▀▄▀▄▀▄
//▄▀▄▀▄  https://code.earthengine.google.com/25037f8b94d28d3282a9f0417a3ea917  ▄▀▄▀▄▀▄
//▄▀▄▀▄                                                                        ▄▀▄▀▄▀▄
//▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀



// released under Open Source GPL License Copyright © 2023 Ka Hei Chow

// ##################################### //
// ######    Historical Heatwaves ###### //
// ######       Detection         ###### //
// ##################################### //

/**
 * Using 5 day moving window to detect abnormal heat anomaly (heatwave)
 * using MODIS compared to long-term average (90th percentile)
 */

var startdate = ee.Date.fromYMD(2010,1,1);
var enddate = ee.Date.fromYMD(2022,12,31);

// Filter data
var collection = ee.ImageCollection('MODIS/006/MOD11A1')
  .select('LST_Day_1km')
  .filterBounds(geometry)
  .filterDate(startdate, enddate);
  
var join = ee.Join.saveAll({
  matchesKey: 'images'
});

var timeField = 'system:time_start';

var diffFilter = ee.Filter.maxDifference({
  difference: 1000 * 60 * 60 * 24 * 5,
  leftField: timeField, 
  rightField: timeField
});

var threeNeighborJoin = join.apply({
  primary: collection, 
  secondary: collection, 
  condition: diffFilter
})

var smoothed = ee.ImageCollection(threeNeighborJoin.map(function(image) {
  var collection = ee.ImageCollection.fromImages(image.get('images'));
  return ee.Image(image).addBands(collection.min())
  .copyProperties({
        source: image,
        properties: ['system:time_start']
      });
}));

var smoothed_deg = smoothed.map(function(image) {
  return image.multiply(0.02).subtract(273.15)
  .copyProperties({
        source: image,
        properties: ['system:time_start']
      });
}) 

print("smoothed_deg", smoothed_deg);

Map.addLayer(smoothed_deg.first().clip(geometry), {}, 'Lowest LST in 5 Days');

// return the list of coordinates
var listCoords = ee.Array.cat(geometry.coordinates(), 1); 

// get the Y-coordinates
var yCoords = listCoords.slice(1, 1, 2)

// reduce the arrays
var yMin = yCoords.reduce('min', [0]).get([0,0])
var yMax = yCoords.reduce('max', [0]).get([0,0])

var south = yMin.add(yMax).divide(2).lt(0);
var shift = south.multiply(6).getInfo();

// get historical temperature data
var lst = ee.ImageCollection('IDAHO_EPSCOR/TERRACLIMATE')
.filter(ee.Filter.date('1980-01-01', '2011-01-01'))
.select('tmmx');

print(lst);

// get month sequence
var month = ee.List.sequence(1, 12);

// function for extract monthly temperature
var get_month_lst = function(month) {
  
  // temperal filtering
  var filtered = lst.filter(
    ee.Filter.calendarRange(month, month, 'month')
    );
  // convert to celsius
  var composite = filtered.reduce(ee.Reducer.percentile([95])).multiply(0.1);
  // format output
  var month_lst = composite.rename('lst').set('month', month);
  
  return month_lst;
};

// https://gis.stackexchange.com/questions/372828/get-feature-values-from-imagecollection-to-list
// compute month temperature for the whole time series
var composites = ee.ImageCollection.fromImages(month.map(get_month_lst));
print(composites);

var lst_list = ee.List([]);

function reduce_dataset_region(image, list) {
      var local_image = image.reduceRegion({
        reducer: ee.Reducer.mean(),
        geometry: geometry,
        scale: 2000 
      }
    );
    return ee.List(list).add(local_image.get('lst'));
}

var reduced_dataset = composites.iterate(reduce_dataset_region, lst_list);
var reduced_dataset_dict = reduced_dataset.getInfo();

// print(reduced_dataset_dict);

smoothed_deg = smoothed_deg.map(function(image) {
  // month 1 to 12th
  var month = image.date().getRelative('month', 'year');
  var monthBand = ee.Image.constant(month).uint16().rename('month');
  image = image.addBands(monthBand);

  // get historical temperature as threshold based on month of year
  // does not work
  // console.log(month); // cannot print
  // console.log(reduced_dataset_dict); // es expected
  // console.log(reduced_dataset_dict[ee.Number(month)]); // >> undefined
  // console.log(reduced_dataset_dict[month]); // >> undefined
  // console.log(reduced_dataset_dict[month.getInfo()]); // >> error
  
  var threshold = ee.Image.constant(reduced_dataset_dict[month]).rename('p95').double();
  image = image.addBands(threshold);
  return image;
});

// print(smoothed_deg);

// var chart = ui.Chart.image.series({
//   imageCollection: smoothed_deg.select(['LST_Day_1km_1','p95']),
//   region: geometry,
//   reducer: ee.Reducer.median(),
//   scale: 1000
// }).setOptions({
//       lineWidth: 1,
//       title: 'LST Time Series',
//       interpolateNulls: true,
//       vAxis: {title: 'Temperature',viewWindow: {min: 10, max: 50}},
//       hAxis: {title: 'Time', format: 'YYYY-MMM'},
//       explorer: {}
//     })
// print(chart);



