/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[66.85300132500062, 25.122869180670044],
          [66.85300132500062, 24.873941362646352],
          [67.22104331718812, 24.873941362646352],
          [67.22104331718812, 25.122869180670044]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▄▀
//▄▀▄▀▄                                                                        ▄▀▄▀▄▀▄
//▄▀▄▀▄           COPY THIS URL LINK TO PLAY AROUND WITH THE CODE              ▄▀▄▀▄▀▄
//▄▀▄▀▄                                                                        ▄▀▄▀▄▀▄
//▄▀▄▀▄  https://code.earthengine.google.com/25037f8b94d28d3282a9f0417a3ea917  ▄▀▄▀▄▀▄
//▄▀▄▀▄                                                                        ▄▀▄▀▄▀▄
//▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀



// released under Open Source GPL License Copyright © 2023 Ka Hei Chow

// ##################################### //
// ######    Historical Heatwaves ###### //
// ######       Detection         ###### //
// ##################################### //

/**
 * Using 5 day moving window to detect abnormal heat anomaly (heatwave)
 * using MODIS compared to long-term average (95th percentile)
 */

var startdate = ee.Date.fromYMD(2010,1,1); // start of analysis time frame 
var enddate = ee.Date.fromYMD(2023,6,1); // end of analysis time frame

// Filter MODIS data by cloud coverage
var maskClouds = function(image) {
  var QA = image.select('QC_Day');
  var bitMask = 1 << 10;
  return image.updateMask(QA.bitwiseAnd(bitMask).eq(0));
}; 

// Get MODIS LST data layer
var collection = ee.ImageCollection('MODIS/006/MOD11A1')
  .map(maskClouds)
  .select('LST_Day_1km')
  .filterBounds(geometry)
  .filterDate(startdate, enddate);

var join = ee.Join.saveAll({
  matchesKey: 'images'
});

var timeField = 'system:time_start';

// Moving window filter
var diffFilter = ee.Filter.maxDifference({
  difference: 1000 * 60 * 60 * 24 * 5, // 5 days
  leftField: timeField, 
  rightField: timeField
});

// Apply moving window
var threeNeighborJoin = join.apply({
  primary: collection,
  secondary: collection, 
  condition: diffFilter
});

// Extract filtered temperature for collection
var smoothed = ee.ImageCollection(threeNeighborJoin.map(function(image) {
  var collection = ee.ImageCollection.fromImages(image.get('images'));
  return ee.Image(image).addBands(collection.min()) // moving window minimum
  .copyProperties({
        source: image,
        properties: ['system:time_start']
      });
}));

// Apply scale factor and offset for collection
var smoothed_deg = smoothed.map(function(image) {
  return image.multiply(0.02).subtract(273.15)
  .copyProperties({
        source: image,
        properties: ['system:time_start']
      });
});

// Visualizing Lowest Land Surface Temperature for consecutive 5 Days
var c = require('users/pinkychow1010/WB_IntraUrban:helper').color;

// Basemap
Map.setOptions("Hybrid");

// Display LST layer
Map.addLayer(
  smoothed_deg.select('LST_Day_1km_1').first().clip(geometry), 
  {min: 26, max: 30, palette: c.magma},
  'Lowest LST in 5 Days (First Image)'
  );

// return the list of coordinates
var listCoords = ee.Array.cat(geometry.coordinates(), 1); 

// get the Y-coordinates
var yCoords = listCoords.slice(1, 1, 2);

// reduce the arrays
var yMin = yCoords.reduce('min', [0]).get([0,0]);
var yMax = yCoords.reduce('max', [0]).get([0,0]);

var south = yMin.add(yMax).divide(2).lt(0);
var shift = south.multiply(6).getInfo();

// get historical temperature data (From TERRACLIMATE)
var lst = ee.ImageCollection('IDAHO_EPSCOR/TERRACLIMATE')
.filter(ee.Filter.date('1980-01-01', '2011-01-01'))
.select('tmmx');

// ERA Reanalysis Data
// var lst = ee.ImageCollection("ECMWF/ERA5/MONTHLY")
//   .filter(ee.Filter.date('1980-01-01', '2011-01-01'))
//   .select('maximum_2m_air_temperature');
// print(lst);

// get month sequence
var month = ee.List.sequence(1, 12);

// function for extract monthly temperature
var get_month_lst = function(month) {
  // temperal filtering
  var filtered = lst.filter(
    ee.Filter.calendarRange(month, month, 'month')
    );
  // convert to celsius
  var composite = filtered.reduce(ee.Reducer.percentile([95])).multiply(0.1);//add(-272.15);//for ERA only
  // format output
  var month_lst = composite.rename('lst').set('month', month);
  
  return month_lst;
};

// https://gis.stackexchange.com/questions/372828/get-feature-values-from-imagecollection-to-list
// compute month temperature for the whole time series
var composites = ee.ImageCollection.fromImages(month.map(get_month_lst));
// print(composites);

var lst_list = ee.List([]);

// function to compute regional median
function reduce_dataset_region(image, list) { 
      var local_image = image.reduceRegion({
        reducer: ee.Reducer.median(),
        geometry: geometry,
        scale: 2000 
      }
    );
    return ee.List(list).add(local_image.get('lst'));
}

// regional median for each month (apply reduce_dataset_region function)
var reduced_dataset = ee.List(composites.iterate(reduce_dataset_region, lst_list));
var reduced_dataset_dict = reduced_dataset.getInfo();

// map function to compute 95th percentile from TERRACLIMATE for aoi (area of interest: Karachi)
smoothed_deg = smoothed_deg.map(function(image) {
  // month 1 to 12th
  var month = image.date().getRelative('month', 'year');
  var monthBand = ee.Image.constant(month).uint16().rename('month');
  image = image.addBands(monthBand);

  var threshold = ee.Image.constant(ee.List(reduced_dataset.get(month))).rename('p95').double();
  image = image.addBands(threshold);
  return image;
});

// print(smoothed_deg);
smoothed_deg = smoothed_deg.map(function(image) {
  return image
  .select(['LST_Day_1km_1','p95'])
  .rename(['Daytime LST 5 day min','95th Percentile 1980-2010']);
});

// ploting style
var textStyle = {
  color: 'black',
  fontName: 'arial',
  fontSize: 16,
  bold: true,
  italic: false
};

// compute chart

// ️ Historical Heatwaves in Karachi, Pakistan
var chart = ui.Chart.image.series({
  imageCollection: smoothed_deg,
  region: geometry,
  reducer: ee.Reducer.median(),
  scale: 1000
}).setOptions({
      lineWidth: 1,
      title: '🌡️ Historical Heatwaves in Karachi, Pakistan',
      interpolateNulls: true,
      vAxis: {title: 'MODIS LST (°C)',gridlines: {color: '#36454F'}, viewWindow: {min: 10, max: 50}, textStyle: textStyle,  titleTextStyle: textStyle},
      hAxis: {title: 'Time', gridlines: {color: '#36454F'}, format: 'YYYY-MMM', textStyle: textStyle,  titleTextStyle: textStyle},
      chartArea: {backgroundColor: '#000000'},
    series: {
      0: {curveType: 'function', lineWidth: 2, color: '#00FFFF', lineDashStyle: [4, 1]},
      1: {lineWidth: 0.8, color: 'red'}
    },
      explorer: {}
    });

print(chart);

// Temperature differences compared to historical statistics
var diff = smoothed_deg.map(function(image) {
  var min = image.select('Daytime LST 5 day min');
  var ref = image.select('95th Percentile 1980-2010');
  var diff = min.subtract(ref).rename('difference');
  return diff.copyProperties({
        source: image,
        properties: ['system:time_start']
      });
});

var chart = ui.Chart.image.series({
  imageCollection: diff,
  region: geometry,
  reducer: ee.Reducer.median(),
  scale: 1000
}).setOptions({
      lineWidth: 1,
      title: '🌡Temperature Abnormal Anomaly',
      interpolateNulls: true,
      vAxis: {title: 'LST Difference (°C)',gridlines: {color: 'red'}, viewWindow: {min: -15, max: 15}, textStyle: textStyle,  titleTextStyle: textStyle},
      hAxis: {title: 'Time', gridlines: {color: '#36454F'}, format: 'YYYY-MMM', textStyle: textStyle,  titleTextStyle: textStyle},
      chartArea: {backgroundColor: '#000000'},
    series: {lineWidth: 0.8, color: 'red'},
      explorer: {}
    });

print(chart);












