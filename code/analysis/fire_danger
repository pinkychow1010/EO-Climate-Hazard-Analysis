/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var aoi = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[101.89609727409508, 21.671555379438484],
          [101.89609727409508, 9.680723223349851],
          [110.77305039909508, 9.680723223349851],
          [110.77305039909508, 21.671555379438484]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▄▀
//▄▀▄▀▄                                                                        ▄▀▄▀▄▀▄
//▄▀▄▀▄           COPY THIS URL LINK TO PLAY AROUND WITH THE CODE              ▄▀▄▀▄▀▄
//▄▀▄▀▄                                                                        ▄▀▄▀▄▀▄
//▄▀▄▀▄  https://code.earthengine.google.com/5143b2698a8fae68fbc67bc5f6b18d10  ▄▀▄▀▄▀▄
//▄▀▄▀▄                                                                        ▄▀▄▀▄▀▄
//▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀



// ############################################## //
// ######    Keetch-Byram Drought Index    ###### //
// ############################################## //

/**
 * 
 * This is an example script for visualizing KBDI drought index in Pakistan
 * 
 * Project details: https://wtlab.iis.u-tokyo.ac.jp/DMEWS/
 * Dataset Page: https://developers.google.com/earth-engine/datasets/catalog/UTOKYO_WTLAB_KBDI_v1
 * 
 */

// import module
var helper = require('users/pinkychow1010/WB_IntraUrban:helper');

// get last 10 days
var newDate = new Date();
var today = ee.Date(newDate);
var previous = today.advance(-14, 'day');

// get dataset
var collection = ee.ImageCollection('UTOKYO/WTLAB/KBDI/v1')
  .select('KBDI')
  .filterDate(previous, today);

// define vis params
var bandViz = {
  min: 300,
  max: 700,
  palette: [
    "#CCCCCC",
    "#FEFF2C",
    "#FF6625",
    "#CC001A",
    "#730009"
  //  'feb24c', 'fd8d3c', 'fc4e2a', 'e31a1c', 'b10026'
  ],
  opacity: 0.3
};

var droughtViz = {
  min: 300,
  max: 700,
  palette: [
    "#CCCCCC",
    "#FEFF2C",
    "#FF6625",
    "#CC001A",
    "#730009"
    //'feb24c', 'fd8d3c', 'fc4e2a', 'e31a1c', 'b10026'
  ],
  opacity: 0.9
};

// define area of interest
// var ADM2 = ee.FeatureCollection('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/geoboundaries/CGAZ_ADM2');
// var aoi = ADM2.filter(ee.Filter.eq('shapeGroup', 'PAK')); // Pakistan

Map.setOptions("Hybrid");
Map.centerObject(aoi, 5);

// define drought conditions
var img = collection.max().clip(aoi);
var drought = img.gt(200);

// display layers
// Map.addLayer(img, bandViz, 'Keetch-Byram Drought Index');
// Map.addLayer(img.updateMask(drought), droughtViz, 'Drought Alert');
// draw_bounds(aoi);

// var legend = helper.add_colorbar(droughtViz, "KBDI", 0);
// Map.add(legend);

var intervals =
'<RasterSymbolizer>' +
' <ColorMap type="intervals" extended="false" >' +
    '<ColorMapEntry color="#CCCCCC" quantity="0" label="No Data"/>' +
    '<ColorMapEntry color="#FEFF2C" quantity="200" label="Drought Hazard"/>' +
    '<ColorMapEntry color="#FF6625" quantity="400" label="Drought Hazard"/>' +
    '<ColorMapEntry color="#CC001A" quantity="600" label="Drought Hazard"/>' +
    '<ColorMapEntry color="#730009" quantity="800" label="Drought Hazard"/>' +
  '</ColorMap>' +
'</RasterSymbolizer>';

// Define a dictionary which will be used to make legend and visualize image on map
var dict = {
  "names": [
    "No Hazard",
    "Low Hazard",
    "Water Deficit",
    "Drought",
    "Severe Drought"
  ],
  "colors": [
    "#CCCCCC",
    "#FEFF2C",
    "#FF6625",
    "#CC001A",
    "#730009"
  ]};
  
  // Create a panel to hold the legend widget
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});

addCategoricalLegend(legend, dict, 'KBDI');

var agb = ee.ImageCollection("projects/sat-io/open-datasets/ESA/ESA_CCI_AGB")
.limit(1, 'system:time_start', false).first().select('AGB');

var potential = agb.gt(1);
var danger = agb.gt(50);

// display layers
img = img.select('KBDI');
// Map.addLayer(img.sldStyle(intervals), {}, 'Keetch-Byram Drought Index');
// Map.addLayer(img.updateMask(drought).sldStyle(intervals), {}, 'Drought Alert');
Map.addLayer(img.updateMask(drought).updateMask(potential).sldStyle(intervals), {}, 'Fire Alert');
Map.addLayer(img.updateMask(drought).updateMask(danger).sldStyle(intervals), {}, 'Fire Danger');

var c = require('users/pinkychow1010/WB_IntraUrban:helper').color;
// Map.addLayer(agb, {min:0, max:200, palette:c.greens}, "CCI Biomass");

var dataset = ee.ImageCollection('FIRMS').filter(
    ee.Filter.date('2023-07-01', '2023-07-10')).sum();

var confident = dataset.select('confidence').gt(50);
var fires = dataset.select('T21').updateMask(confident);
var firesVis = {
  min: 300.0,
  max: 400.0,
  palette: ['blue'],
};

var grayscale_basemap = [
  {   // Dial down the map saturation.
  stylers: [ { saturation: -100} ,{ lightness: 50 } ]
  },{ // Dial down the label darkness.
  elementType: 'labels',
  stylers: [ { lightness: 70 } ]
  },{ // Simplify the road geometries.
  featureType: 'road',
  elementType: 'geometry',
  stylers: [ { visibility: 'simplified' } ]
  },{ // Turn off road labels.
  featureType: 'road',
  elementType: 'labels',
  stylers: [ { visibility: 'off' } ]
  },{ // Turn off all icons.
  elementType: 'labels.icon',
  stylers: [ { visibility: 'off' } ]
  },{ // Turn off all POIs.
  featureType: 'poi',
  elementType: 'all',
  stylers: [ { visibility: 'off' }]
  }
];

Map.setOptions('Gray', {'Gray': grayscale_basemap});

var lulc = ee.ImageCollection('ESA/WorldCover/v200')
.first()
.clip(aoi);

var natural_veg = lulc.lt(40);
Map.addLayer(fires.updateMask(natural_veg), firesVis, 'Fires');
















// Function to generate the legend
function addCategoricalLegend(panel, dict, title) {
  
  // Create and add the legend title.
  var legendTitle = ui.Label({
    value: title,
    style: {
      fontWeight: 'bold',
      fontSize: '18px',
      margin: '0 0 4px 0',
      padding: '0'
    }
  });
  panel.add(legendTitle);
  
  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});
  panel.add(loading);
  
  // Creates and styles 1 row of the legend.
  var makeRow = function(color, name) {
    // Create the label that is actually the colored box.
    var colorBox = ui.Label({
      style: {
        backgroundColor: color,
        // Use padding to give the box height and width.
        padding: '8px',
        margin: '0 0 4px 0'
      }
    });
  
    // Create the label filled with the description text.
    var description = ui.Label({
      value: name,
      style: {margin: '0 0 4px 6px'}
    });
  
    return ui.Panel({
      widgets: [colorBox, description],
      layout: ui.Panel.Layout.Flow('horizontal')
    });
  };
  
  // Get the list of palette colors and class names from the image.
  var palette = dict.colors;
  var names = dict.names;
  loading.style().set('shown', false);
  
  for (var i = 0; i < names.length; i++) {
    panel.add(makeRow(palette[i], names[i]));
  }
  
  Map.add(panel);
}

