var palettes = require('users/gena/packages:palettes');

// var colors = [
//     "#CCCCCC",
//     "#FEFF2C",
//     "#FF6625",
//     "#CC001A",
//     "#730009"
//   ];
var colors = palettes.colorbrewer.RdBu[5].reverse(); // color palette

// transform color code to #RRGGBB
var color_arr = [];
var color;

for (var i in colors) {
  color = colors[i];
  if (color.length < 7) {
    color = "#" + color;
    color_arr.push(color);
  }
}
print(color_arr);

colors = color_arr; // update color palette
var bins = ["0", "200", "400", "600", "800"]; // bin bounds
var labels = [ // category labels
    "No Hazard",
    "Limited Water Deficit",
    "Water Deficit",
    "Drought",
    "Severe Drought"
  ];

var start = '<RasterSymbolizer>' +
' <ColorMap type="intervals" extended="false" >';

var end =  '</ColorMap>' +
'</RasterSymbolizer>';

var groups = "";

var List = ee.List.sequence(0, colors.length-1).getInfo();
// print(List);

var i=0;


for (var i in List) {
  var color = colors[i];
  var bin = bins[i];

  var line = '<ColorMapEntry color="' + color + '" quantity="' + bin + '" label=""/>';
  groups = groups + line;
}

// print(groups);

var intervals = start + groups + end;
print(intervals);

// Define a dictionary which will be used to make legend and visualize image on map
var dict = {
  "names": labels,
  "colors": colors
};
  
  // Create a panel to hold the legend widget
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});

var title = "Index";
var panel = legend;

// Create and add the legend title.
var legendTitle = ui.Label({
  value: title,
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
  }
});
panel.add(legendTitle);

var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});
panel.add(loading);

// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
  // Create the label that is actually the colored box.
  var colorBox = ui.Label({
    style: {
      backgroundColor: color,
      // Use padding to give the box height and width.
      padding: '8px',
      margin: '0 0 4px 0'
    }
  });

  // Create the label filled with the description text.
  var description = ui.Label({
    value: name,
    style: {margin: '0 0 4px 6px'}
  });

  return ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')
  });
};

// Get the list of palette colors and class names from the image.
var palette = dict.colors;
var names = dict.names;
loading.style().set('shown', false);

for (var i = 0; i < names.length; i++) {
  panel.add(makeRow(palette[i], names[i]));
}

Map.add(panel);

// get last 10 days
var newDate = new Date();
var today = ee.Date(newDate);
var previous = today.advance(-14, 'day');

// get dataset
var landMask = ee.Image('MODIS/MOD44W/MOD44W_005_2000_02_24').select('water_mask').eq(0);

// previous
var previous4w = today.advance(-28, 'day');
var previous2w = today.advance(-14, 'day');

var collection_before = ee.ImageCollection('UTOKYO/WTLAB/KBDI/v1')
  .select('KBDI')
  .filterDate(previous4w, previous2w)
  .first()
  .updateMask(landMask);

var styled_img_before = collection_before.sldStyle(intervals);

Map.addLayer(styled_img_before, {}, 'Keetch-Byram Drought Index (4 weeks before)');

// last 2 weeks
var collection = ee.ImageCollection('UTOKYO/WTLAB/KBDI/v1')
  .select('KBDI')
  .filterDate(previous, today)
  .first()
  .updateMask(landMask);

var styled_img = collection.sldStyle(intervals);

Map.addLayer(styled_img, {}, 'Keetch-Byram Drought Index (last 2 weeks)');

Map.setOptions("Hybrid");