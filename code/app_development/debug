/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var bbox = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[8.7453089237213, 43.01645732006388],
          [8.7453089237213, 42.524506076446826],
          [9.5363245487213, 42.524506076446826],
          [9.5363245487213, 43.01645732006388]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// released under MIT License Copyright Â© 2023 Ka Hei Chow

/*
 * Debugging downloader spatial interpolation issues
*/
 
// var dataset = ee.ImageCollection('MODIS/061/MOD11A1')
//                   .filter(ee.Filter.date('2018-01-01', '2018-05-01')).first();
// var image = dataset.select('LST_Day_1km').clip(bbox); // limit bounds

// var img = image.reduceResolution({
//     'reducer':ee.Reducer.mean(),
//     'bestEffort':true
//   }).reproject({'crs':'EPSG: 4326','scale':1000});

// var dataset = ee.ImageCollection('JRC/GHSL/P2016/POP_GPW_GLOBE_V1')
//                   .filter(ee.Filter.date('2015-01-01', '2015-12-31')).first();
// var pop = dataset.select('population_count').clip(bbox); // limit bounds
  
// var img = pop.reduceResolution({
//         'reducer':ee.Reducer.mean(),
//         'bestEffort':true
//       }).reproject({'crs':'EPSG: 4326','scale':1000});
    
// var downloadArgs = {
//       name: 'Image',
//       scale: 1000,
//       region: bbox//.dissolve().bounds()
//   };
  
// // get url link for user to download raster
// var url = img.getDownloadURL(downloadArgs);
// print(url);


// var dataset = ee.ImageCollection('JRC/GHSL/P2016/POP_GPW_GLOBE_V1')
//                   .filter(ee.Filter.date('2015-01-01', '2015-12-31')).first();
// var pop = dataset.select('population_count').clip(bbox); // limit bounds

// print(dataset.projection());
// print(pop.projection());

// function resample(image, res, reducer) {
//     var proj = image.projection().getInfo();
//     var crs = proj.crs;
//     print(proj);
    
//     var wkt = proj.wkt;
//     print(wkt);
//     var resampled = image.reduceResolution({
//       'reducer':reducer,
//       'bestEffort':true
//     }).reproject({'crs':ee.Projection(wkt),'scale':res});
//     return resampled;
//   }

// // resample(pop, 1000, ee.Reducer.mean());
var start_year = ee.Date("2020-01-01");
var end_year = ee.Date("2021-01-01");
  
// filter dataset to evaluation year
var yearFilter = ee.Filter.date(
  start_year.advance(-1, "year"), 
  end_year.advance(1, "year")
  );

// get summer months depends on location
var summerFilter = ee.Filter.calendarRange(5, 9, "month");

var lst = ee.ImageCollection("MODIS/061/MOD11A2")
  //.map(maskClouds) // to be done: add MODIS cloud masking 
  .select("LST_Day_1km") // day time temperature
  .filter(yearFilter) // filter year
  .filter(summerFilter) // filter season
  .median() // get median
  .multiply(0.02) // apply scale factor
  .subtract(272.15) // apply offset
  .clip(bbox); // limit bounds
  
// // print(lst.projection());
var ref = ee.ImageCollection("MODIS/061/MOD11A2").first().projection();

var resampled = lst.setDefaultProjection(ref).reduceResolution({
    'reducer':ee.Reducer.mean(),
    'bestEffort':true
  }).reproject({'crs':'EPSG: 4326','scale':1000});

var downloadArgs = {
      name: 'Image',
      scale: 1000,
      region: bbox
  };

// get url link for user to download raster
var url = resampled.getDownloadURL(downloadArgs);
print(url);