// Auto color category
function create_color_category(colors, min, max, title) {
  
  if (title === undefined || title === null){var title = "Legend"};
  
  // create bins
  var steps = (max-min)/colors.length;
  var bins = []; var labels = []; 
  
  for (var n in colors) {
    //var low = min+(n*steps);
    var high = min+(n*steps)+steps;
    bins.push(high);
    //bins.push(low);
    
    var label = String(low);// + " - " + String(high);
    labels.push(label);
  }
  
  print("BINS: ", bins); print("LABELS: ", labels);
  
  // transform color code to #RRGGBB
  var color_arr = [];
  var color;
  
  for (var n in colors) {
    color = colors[n];
    if (color.length < 7) {
      color = "#" + color;
      color_arr.push(color);
    }
  }
  colors = color_arr; // update color palette
  
  // construct OGC SLD styling string
  var start = '<RasterSymbolizer>' +
  ' <ColorMap type="intervals" extended="false" >';
  
  var end =  '</ColorMap>' +
  '</RasterSymbolizer>';
  
  var groups = "";
  var List = ee.List.sequence(0, colors.length-1).getInfo();
  print("LIST: ", List);
  
  var i=0; // loop through each color and bin to create string for each class
  for (var i in List) {
    var color = colors[i];
    var bin = bins[i];
    var line = '<ColorMapEntry color="' + color + '" quantity="' + bin + '" label=""/>';
    groups = groups + line;
  }
  // complete styling string
  var intervals = start + groups + end;
  print("INTERVALS: ", intervals);
  
  // Define a dictionary which will be used to make legend and visualize image on map
  var dict = {
    "names": labels,
    "colors": colors
  };
    
    // Create a panel to hold the legend widget
  var legend = ui.Panel({
    style: {
      position: 'bottom-left',
      padding: '8px 15px'
    }
  });

  var panel = legend; // legend panel
  
  // Create and add the legend title.
  var legendTitle = ui.Label({
    value: title,
    style: {
      fontWeight: 'bold',
      fontSize: '18px',
      margin: '0 0 4px 0',
      padding: '0'
    }
  });
  panel.add(legendTitle);
  
  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});
  panel.add(loading);
  
  // Creates and styles 1 row of the legend.
  var makeRow = function(color, name) {
    // Create the label that is actually the colored box.
    var colorBox = ui.Label({
      style: {
        backgroundColor: color,
        // Use padding to give the box height and width.
        padding: '8px',
        margin: '0 0 4px 0'
      }
    });
  
    // Create the label filled with the description text.
    var description = ui.Label({
      value: name,
      style: {margin: '0 0 4px 6px'}
    });
  
    return ui.Panel({
      widgets: [colorBox, description],
      layout: ui.Panel.Layout.Flow('horizontal')
    });
  };
  
  // Get the list of palette colors and class names from the image.
  var palette = dict.colors;
  var names = dict.names;
  loading.style().set('shown', false);
  
  // generate legend thumbnails row by row
  for (var i = 0; i < names.length; i++) {
    panel.add(makeRow(palette[i], names[i]));
  }
  
  return [panel, intervals]; // return a list of legend panel and styling string (ee.Image.sldStyle)
}

var palettes = require('users/gena/packages:palettes');
var colors = palettes.colorbrewer.RdBu[4].reverse();

var out = create_color_category(colors, 0, 800);

var panel = out[0]; var intervals = out[1];

Map.add(panel);

var col = ee.ImageCollection('UTOKYO/WTLAB/KBDI/v1')
  .select('KBDI')
  .first();

// style image
var img = col.sldStyle(intervals);
Map.addLayer(img);
Map.setCenter(92, 40, 5);