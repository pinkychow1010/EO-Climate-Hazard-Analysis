
//▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▄▀
//▄▀▄▀▄                                                                        ▄▀▄▀▄▀▄
//▄▀▄▀▄           COPY THIS URL LINK TO PLAY AROUND WITH THE CODE              ▄▀▄▀▄▀▄
//▄▀▄▀▄                                                                        ▄▀▄▀▄▀▄
//▄▀▄▀▄  https://code.earthengine.google.com/b197be9c8ad3b3e83e957eb3f2b553a0  ▄▀▄▀▄▀▄
//▄▀▄▀▄                                                                        ▄▀▄▀▄▀▄
//▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀



// released under Open Source GPL License Copyright © 2023 Ka Hei Chow

/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[66.60664062499998, 25.745178320542273],
          [66.60664062499998, 24.151463374228385],
          [68.36445312499998, 24.151463374228385],
          [68.36445312499998, 25.745178320542273]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[66.60664062499998, 25.745178320542273],
          [66.60664062499998, 24.151463374228385],
          [68.36445312499998, 24.151463374228385],
          [68.36445312499998, 25.745178320542273]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// return the list of coordinates
var listCoords = ee.Array.cat(geometry.coordinates(), 1); 

// get the Y-coordinates
var yCoords = listCoords.slice(1, 1, 2)

// reduce the arrays
var yMin = yCoords.reduce('min', [0]).get([0,0])
var yMax = yCoords.reduce('max', [0]).get([0,0])

var south = yMin.add(yMax).divide(2).lt(0);
var shift = south.multiply(6).getInfo();

var summerFilter = ee.Filter.calendarRange(5+shift, 9+shift, "month");

var lst = ee.ImageCollection("MODIS/061/MOD11A2")
  .select("LST_Day_1km")

var start;
var end;

// Run this function on a change of the dateSlider.
var update_start = function(date) {
  start = date.getInfo().dates[0];
  console.log(start)
  console.log(end)
  
  var visParams = {bands: ["LST_Day_1km"], min: 20, max: 40};
  
  console.log(lst.filterDate(start, end))
  var ds = lst.filterDate(start, end)
    .median()
    .multiply(0.02)
    .subtract(272.15)
    .clip(geometry);
    
    var layer = ui.Map.Layer(ds, visParams, 'LST');
    Map.layers().set(0, layer);
};

var update_end = function(date) {
  end = date.getInfo().dates[0];
  var visParams = {bands: ["LST_Day_1km"], min: 20, max: 40};
  
  var ds = lst.filterDate(start, end)
    .median()
    .multiply(0.02)
    .subtract(272.15)
    .clip(geometry);
    
  var layer = ui.Map.Layer(ds, visParams, 'LST');
  Map.layers().set(0, layer);
};

// compute the date range and show the slider.
var dateSlider = ui.DateSlider({
  start: '2000-01-01',
  end: '2023-01-01',
  value: null,
  period: 1,
  onChange: update_start
});

dateSlider.style().set({'width': '300px'});
Map.add(dateSlider.setValue('2022-12-01'));

var dateSlider2 = ui.DateSlider({
  start: '2000-01-01',
  end: '2023-01-01',
  value: null,
  period: 1,
  onChange: update_end
});

dateSlider.style().set({'width': '300px'});
Map.add(dateSlider2.setValue('2023-01-01'));

Map.centerObject(geometry);