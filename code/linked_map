/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var global_CISI = ee.Image("projects/sat-io/open-datasets/CISI/global_CISI"),
    infrastructure = ee.ImageCollection("projects/sat-io/open-datasets/CISI/amount_infrastructure");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// ######################################### //
// ######    Mulit-variable           ###### //
// ######    Linked Map               ###### //
// ######################################### //

/**
 * This is an example script for linked map
 * 
 */

// import modules 
var palettes = require('users/gena/packages:palettes');
var analysis = require('users/pinkychow1010/WB_IntraUrban:analysis_utils');

// get area of interest: Pakistan
var ADM2 = ee.FeatureCollection(
  'projects/earthengine-legacy/assets/projects/sat-io/open-datasets/geoboundaries/CGAZ_ADM2'
  );
var pakistan = ADM2.filter(ee.Filter.eq('shapeGroup', 'PAK'));

// visualize CI index
var cisi = global_CISI.clip(pakistan);
// var vis = {min:0,max:0.2,palette: ['orange','yellow','green','blue']};
// Map.addLayer(cisi,vis,'Global CISI');


// arguments for choropleth map
var vector = pakistan; 
var attribute = 'mean';
var palette = palettes.cmocean.Balance[6];
var log = 0;
var class_n = 6;
var title = "Mean";
var opacity = 0.9;

// sample raster values
var zonal = cisi.reduceRegions({
  collection: vector,
  scale: 500,
  reducer:  ee.Reducer.mean()
});

// // call function for choropleth_map
// analysis.choropleth_map(
//   vector=zonal, 
//   attribute=attribute, 
//   palette=palette, 
//   opacity=opacity, 
//   log=log, 
//   class_n=class_n, 
//   title=title
//   );

// // customized basemap to enhance visuals 
// var basemap = require('users/pinkychow1010/WB_IntraUrban:basemap_resources'); 
// basemap.addCustomBasemap('simpleLight');

// add title label
Map.add(ui.Label('CISI in Pakistan (2021)', 
{
  position: 'top-center', 
  fontSize: '30px',
  backgroundColor: '#0047AB',
  fontWeight: '500',
  color: 'white'
}
));

// map layout
Map.setOptions("Hybrid");
Map.centerObject(pakistan, 6);

// Create a map for each visualization option.
var map1 = ui.Map()
map1.add(ui.Label('CISI'))
map1.addLayer(cisi, {}, 'CISI')
map1.setControlVisibility(true);

var map2 = ui.Map()
map2.add(ui.Label('CISI'))
map2.addLayer(cisi, {}, 'CISI')
map2.setControlVisibility(true);

var linker = ui.Map.Linker([map1, map2]);

// Create a grid of maps.
var mapGrid = ui.Panel(
    [
      ui.Panel([map1], null, {stretch: 'both'}),
      ui.Panel([map2], null, {stretch: 'both'})
    ],
    ui.Panel.Layout.Flow('horizontal'), {stretch: 'both'});

map1.centerObject(pakistan,8);


// Add the maps and title to the ui.root.
ui.root.widgets().reset([mapGrid]);
ui.root.setLayout(ui.Panel.Layout.Flow('vertical'));

