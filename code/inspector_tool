/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #d63000 */ee.Geometry.MultiPoint();
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// released under Open Source GPL License Copyright Â© 2023 Ka Hei Chow

// ######################################### //
// ######    Inspector Tool           ###### //
// ######    for Dashboard            ###### //
// ######################################### //

/**
 * This is an example script for developing an inspector tool
 * where user can get polygon id (name) and layer values by
 * clicking on the individual polygon.
 */

/**
 * Add value inspector to interactive dashboard.
 * 
 * This function is used to add an inspector tool for user to inspect layer value interactively
 * by clicking on the individual polygons
 * 
 * @author Ka Hei Chow.
 *
 * @global
 *
 * @fires   add inspector
 * @listens click on area of interest (coordinates will be passed)
 *
 * @param {ee.Geometry.Polygon}   vector        A vector layer which consists of multiple polygon for label display.
 * @param {String}                attribute     An attribute value from the vector layer to be display in labels.
 * @param {ui.Map}                map object    A map object for displaying the inspector tool.
 * 
 * @return {null}
 *
 */
var getPolyVal = function(vector, attribute, map) {
    
    var dark_theme = {
        'backgroundColor': 'black',
        'color': 'white'
      };
      
    var click = ui.Label('Click for info');
    var inspector = ui.Panel([click]);
    
    click.style().set(dark_theme);
    inspector.style().set(dark_theme);
    
    Map.add(inspector);
    
    var getPolyLabel = function(coords) {
      
      inspector.widgets().set(0, ui.Label({
        value: 'Loading...',
        style: dark_theme
      }));
    
      var click_point = ee.Geometry.Point(coords.lon, coords.lat);
      var id_list = vector.reduceColumns(ee.Reducer.toList(), ['shapeName']).get('list');
      var attribute_list = vector.reduceColumns(ee.Reducer.toList(), [attribute]).get('list');
      var shp_lst = vector.toList(vector.size());
      
      var out = shp_lst.map(function (element) {
        var idx = shp_lst.indexOf(element);
        var overlap = ee.Feature(element).intersects(click_point);
        var target_id = ee.Algorithms.If(overlap, idx, 0);
        return target_id;
      }).removeAll([0]);
      
      try {
        out = out.get(0).getInfo();
        var id = ee.List(id_list).get(out);
        var attribute_value = ee.List(attribute_list).get(out);
      
      var value_label = ui.Label({
          value: id.getInfo() + " " + attribute_value.getInfo().toFixed(2)
        });
      
      var empty_label = ui.Label({value: ""});
      
      value_label.style().set(dark_theme);
      empty_label.style().set(dark_theme);
      
        inspector.widgets().set(0, value_label);
      } catch(e) {
        inspector.widgets().set(0, empty_label)
      }
    }
  Map.addLayer(vector, {}, attribute);
  Map.centerObject(vector);
  Map.onClick(getPolyLabel);
};

var ADM2 = ee.FeatureCollection(
  'projects/earthengine-legacy/assets/projects/sat-io/open-datasets/geoboundaries/CGAZ_ADM2'
  );

var pakistan = ADM2.filter(ee.Filter.eq('shapeGroup', 'PAK'));

var rwi_ds = ee.FeatureCollection("projects/sat-io/open-datasets/facebook/relative_wealth_index");

var aoi_rwi = rwi_ds.filterBounds(pakistan).map(
  function(point) {
  return point.buffer(2000);
});

var rwi = aoi_rwi.filter(ee.Filter.notNull(['rwi']))
  .reduceToImage({
    properties: ['rwi'],
    reducer: ee.Reducer.mean(),
});

var rwi_zonal = rwi.reduceRegions({
  collection: pakistan,
  scale: 500,
  reducer:  ee.Reducer.mean()
});


getPolyVal(rwi_zonal, 'mean');
Map.centerObject(rwi_zonal,5);

var basemap = require('users/pinkychow1010/WB_IntraUrban:basemap_resources'); 
basemap.addCustomBasemap('MutedMonotone');

// Map.addLayer(pakistan, {},'pak');
// Map.centerObject(pakistan,5);

// var shp = pakistan;
// print(shp);

// // Create a panel and add it to the map.
// var inspector = ui.Panel([ui.Label('Click for info')]);
// Map.add(inspector);

// var getPolyLabel = function(coords) {
//     inspector.widgets().set(0, ui.Label({
//       value: 'Loading...',
//       style: {color: 'gray'}
//     }));
  
//     var click_point = ee.Geometry.Point(coords.lon, coords.lat);
//     var attribute_list = shp.reduceColumns(ee.Reducer.toList(), ['shapeName']).get('list');
//     var shp_lst = shp.toList(shp.size());
    
//     var out = shp_lst.map(function (ele) {
//       var idx = shp_lst.indexOf(ele);
//       var overlap = ee.Feature(ele).intersects(click_point);
//       var target_id = ee.Algorithms.If(overlap, idx, 0);
//       return target_id;
//     }).removeAll([0]);
    
//     try {
//       out = out.get(0).getInfo();
//       var name = ee.List(attribute_list).get(out);
    
//       inspector.widgets().set(0, ui.Label({
//         value: name.getInfo()
//       }));
//     } catch(e) {
//       inspector.widgets().set(0, ui.Label({value: ""}))
//     }
// }

// Map.onClick(getPolyLabel);

//
// var getPolyLabel = function(inspector, vector, attribute) {
//   var wrap = function(coords) {
//     inspector.widgets().set(0, ui.Label({
//       value: 'Loading...',
//       style: {color: 'gray'}
//     }));
    
//     var click_point = ee.Geometry.Point(coords.lon, coords.lat);
//     var attribute_list = vector.reduceColumns(ee.Reducer.toList(), ['shapeName']).get('list');
//     var shp_lst = vector.toList(vector.size());

//     var out = shp_lst.map(function (element) {
//       var idx = shp_lst.indexOf(element);
//       var overlap = ee.Feature(element).intersects(click_point);
//       var target_id = ee.Algorithms.If(overlap, idx, 0);
//       return target_id;
//     }).removeAll([0]);

//     out = out.get(0).getInfo();
//     var name = ee.List(attribute_list).get(out);
  
//     inspector.widgets().set(0, ui.Label({
//       value: name.getInfo()
//     })
//     );
//   };
// };
//
