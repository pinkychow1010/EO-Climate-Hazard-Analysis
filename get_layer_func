// released under Open Source GPL License Copyright Â© 2023 Ka Hei Chow

// ######################################### //
// ######    Functions for Map        ###### //
// ######     Comparison Tool         ###### //
// ######################################### //

/**
 * This script contains functions to get different geospatial layers
 */

exports.get_age_risk = function get_age_risk(aoi) {
  var ds = ee.ImageCollection('WorldPop/GP/100m/pop_age_sex').sum();
  // compute risk factor based on demographics
  var risk = ds.expression(
                        '(total-M80-M75-M70-M65-M60-F80-F75-F70-F65-F60)/total*0.2 + ((M60+F60)/total)*0.4 + ((M65+F65)/total)*0.6 + ((M70+F70)/total)*0.8 + (M75+M80+F75+F80)/total', {
                          'total' : ds.select('population'),
                          'M60' : ds.select('M_60'),
                          'M65' : ds.select('M_65'),
                          'M70' : ds.select('M_70'),
                          'M75' : ds.select('M_75'),
                          'M80' : ds.select('M_80'),
                          'F60' : ds.select('F_60'),
                          'F65' : ds.select('F_65'),
                          'F70' : ds.select('F_70'),
                          'F75' : ds.select('F_75'),
                          'F80' : ds.select('F_80')
                        })
                        .rename('risk');
  
  // mask out invalid pixels
  var mask = ds.select('population').gt(0);
  return risk.select('risk').updateMask(mask).clip(aoi);
};

exports.get_uhi_day = function get_uhi_day(aoi) {
  var uhi = ee.ImageCollection('YALE/YCEO/UHI/Summer_UHI_yearly_pixel/v4')
  .select('Daytime')
  .filter(ee.Filter.inList('system:index', ["2018"]))
  .first();
  return uhi.clip(aoi);
};

exports.get_uhi_night = function get_uhi_night(aoi) {
  var uhi = ee.ImageCollection('YALE/YCEO/UHI/Summer_UHI_yearly_pixel/v4')
  .select('Nighttime')
  .filter(ee.Filter.inList('system:index', ["2018"]))
  .first();
  return uhi.clip(aoi);
};

exports.get_forest_density = function get_forest_density(aoi) {
  
  var bbox = aoi.geometry();
  
  // get urban areas
  var lulc = ee.ImageCollection('ESA/WorldCover/v200')
  .first()
  .clip(bbox);
  
  var urban_mask = lulc.eq(10);
  
  // calculate urban density
  var reduceNeighborhood = urban_mask.reduceNeighborhood(
    ee.Reducer.mean(), 
    ee.Kernel.circle(5000, 'meters')
  ).multiply(100).toByte();
  
  return reduceNeighborhood;
};

exports.get_cropland_density = function get_cropland_density(aoi) {
  
  var bbox = aoi.geometry();
  
  // get urban areas
  var lulc = ee.ImageCollection('ESA/WorldCover/v200')
  .first()
  .clip(bbox);
  
  var urban_mask = lulc.eq(40);
  
  // calculate urban density
  var reduceNeighborhood = urban_mask.reduceNeighborhood(
    ee.Reducer.mean(), 
    ee.Kernel.circle(5000, 'meters')
  ).multiply(100).toByte();
  
  return reduceNeighborhood;
};

exports.get_urban_density = function get_urban_density(aoi) {
  
  var bbox = aoi.geometry();
  
  // get urban areas
  var lulc = ee.ImageCollection('ESA/WorldCover/v200')
  .first()
  .clip(bbox);
  
  var urban_mask = lulc.eq(50);
  
  // calculate urban density
  var reduceNeighborhood = urban_mask.reduceNeighborhood(
    ee.Reducer.mean(), 
    ee.Kernel.circle(5000, 'meters')
  ).multiply(100).toByte();
  
  return reduceNeighborhood;
};

exports.get_cisi = function get_cisi(aoi) {
  return ee.Image("projects/sat-io/open-datasets/CISI/global_CISI").clip(aoi);
};

exports.get_rwi = function get_rwi(aoi) {
  // get RWI data layer from community project (Layer 2)
  var rwi_ds = ee.FeatureCollection("projects/sat-io/open-datasets/facebook/relative_wealth_index");
  
  // buffer point grid to fill gaps
  var aoi_rwi = rwi_ds.filterBounds(aoi).map(
    function(point) {
    return point.buffer(2000);
  });
  
  // convert point grid to raster image
  var rwi = aoi_rwi.filter(ee.Filter.notNull(['rwi']))
    .reduceToImage({
      properties: ['rwi'],
      reducer: ee.Reducer.mean(),
  }); 
  return rwi;
};